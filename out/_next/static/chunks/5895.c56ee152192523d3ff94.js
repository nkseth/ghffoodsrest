(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5895],{7893:function(e,n,o){var t={"./DrawingViewExample.txt":17872,"./GeoLocationExample.txt":83629,"./MapDirectionsExample.txt":96861,"./MapKmLayerExample.txt":83425,"./MapOverlayExample.txt":24705,"./MapPopupInfoExample.txt":33149,"./MarkerClustererExample.txt":43138,"./SimpleMapExample.txt":35864,"./StreetViewPanoramaExample.txt":97e3,"./StyledMapExample.txt":17072,"./TrafficLayerExample.txt":14754};function r(e){var n=a(e);return o(n)}function a(e){if(!o.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}r.keys=function(){return Object.keys(t)},r.resolve=a,e.exports=r,r.id=7893},57948:function(e,n,o){"use strict";o.d(n,{nB:function(){return k},dx:function(){return b},Vr:function(){return x},mr:function(){return d}});var t=o(85893),r=o(38347),a=o(26265),i=(o(67294),o(41120)),l=o(28889),s=o(22318),p=o(86010);function c(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function m(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?c(Object(o),!0).forEach((function(n){(0,a.Z)(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}var g=(0,i.Z)((function(e){return{pageHeaderRoot:(0,a.Z)({display:"flex",flexDirection:"column"},e.breakpoints.up("sm"),{alignItems:"center",flexDirection:"row"}),titleRoot:(0,a.Z)({},e.breakpoints.down("xs"),{marginBottom:10})}})),d=function(e){var n=e.heading,o=e.breadcrumbComponent,a=e.children,i=(0,r.Z)(e,["heading","breadcrumbComponent","children"]),c=g();return(0,t.jsxs)(l.Z,m(m({className:(0,p.Z)(c.pageHeaderRoot,"page-header"),mb:{xs:5,md:6,lg:8}},i),{},{children:[(0,t.jsx)(s.Z,{component:"div",variant:"h1",className:(0,p.Z)(c.titleRoot,"title"),children:n}),(0,t.jsx)(l.Z,{ml:{sm:"auto"},children:o}),a]}))},u=o(10770),f=o(41664),h=(0,i.Z)((function(){return{textSm:{fontSize:12},linkBlock:{display:"block",color:"inherit"}}})),x=function(e){var n=e.items,o=((0,r.Z)(e,["items"]),h());return(0,t.jsx)(u.Z,{className:"bread-crumbs","aria-label":"breadcrumb {...rest}",children:n.map((function(e,n){return e.isActive?(0,t.jsx)(s.Z,{className:o.textSm,color:"textPrimary",children:e.label},n):(0,t.jsx)(f.default,{href:e.link||"/",children:(0,t.jsx)("a",{className:(0,p.Z)(o.textSm,o.linkBlock),children:e.label})},n)}))})},y=o(41749),w=o(14490),M=o(67757),E=o(75322),k=function(e){var n=e.SourceCodeComponent,o=e.SettingsComponent,r=e.children;return(0,t.jsx)(E.Z,{children:(0,t.jsxs)(M.Z,{children:[(0,t.jsxs)(y.Z,{item:!0,xs:12,md:7,children:[(0,t.jsx)(d,{heading:"Preview"}),(0,t.jsx)(l.Z,{mb:8,children:r}),(0,t.jsx)(w.Z,{children:n})]}),(0,t.jsx)(y.Z,{item:!0,xs:12,md:5,children:o})]})})},v=o(42890),b=function(e){var n=e.pageTitle,o=e.menus,r=e.children,a=[{label:"Home",link:"/"},{label:"Material UI Components",link:"/components/mui"},{label:n,isActive:!0}];return(0,t.jsx)(v.Z,{pageTitle:n,breadcrumbs:a,menus:o,children:r})}},42890:function(e,n,o){"use strict";var t=o(85893),r=o(26265),a=(o(67294),o(28889)),i=o(82598),l=o(22318),s=o(62822),p=o(50998),c=o(95757),m=o(41120),g=o(75322),d=(0,m.Z)((function(e){var n;return{root:{display:"flex",flexWrap:"wrap"},contentArea:(n={width:"100%"},(0,r.Z)(n,e.breakpoints.up("sm"),{paddingRight:e.typography.pxToRem(30),width:"calc(100% - ".concat(e.typography.pxToRem(175),")")}),(0,r.Z)(n,e.breakpoints.up("lg"),{paddingRight:e.typography.pxToRem(54)}),n),contentSidebar:{width:e.typography.pxToRem(175),height:"calc(100vh - ".concat(e.typography.pxToRem(102),")"),position:"sticky",top:30,overflowY:"auto",flexShrink:0}}}));n.Z=function(e){var n=e.pageTitle,o=e.menus,r=e.breadcrumbs,m=e.children,u=d();return(0,t.jsx)(g.Z,{heading:n,breadcrumbs:r,children:(0,t.jsxs)(a.Z,{className:u.root,children:[(0,t.jsx)(a.Z,{className:u.contentArea,children:m}),(0,t.jsx)(i.Z,{xsDown:!0,children:(0,t.jsxs)(a.Z,{className:u.contentSidebar,children:[(0,t.jsx)(l.Z,{component:"h4",variant:"h4",children:"Contents"}),(0,t.jsx)(s.Z,{children:o.map((function(e,n){return(0,t.jsx)(p.Z,{dense:!0,button:!0,component:"a",href:"#".concat(e.link),children:(0,t.jsx)(c.Z,{primary:e.label})},n)}))})]})})]})})}},75322:function(e,n,o){"use strict";var t=o(26265),r=o(85893),a=(o(67294),o(28889)),i=o(57948),l=o(82285),s=o(32427),p=o(86010);function c(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function m(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?c(Object(o),!0).forEach((function(n){(0,t.Z)(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}var g=(0,s.Z)((function(e){return{pageFull:{width:"100%",height:"100%",paddingBottom:"70px"}}}));n.Z=function(e){var n=e.heading,o=e.breadcrumbs,t=e.children,s=e.className,c=e.restProps,d=g();return(0,r.jsx)(l.Z,{in:!0,direction:"up",mountOnEnter:!0,unmountOnExit:!0,children:(0,r.jsxs)(a.Z,m(m({className:(0,p.Z)(d.pageFull,s)},c),{},{children:[(n||o)&&(0,r.jsx)(i.mr,{heading:n,breadcrumbComponent:o&&(0,r.jsx)(i.Vr,{items:o})}),t]}))})}},17872:function(e,n,o){"use strict";o.r(n),n.default="import React from 'react';\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\nimport DrawingManager from 'react-google-maps/lib/components/drawing/DrawingManager';\nimport { Box } from '@material-ui/core';\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\n\n/*\n * https://developers.google.com/maps/documentation/javascript/examples/drawing-tools\n *\n * Note: requires the Google Maps drawing API library in your script src\n *\n * Credits: thanks @idolize for the contribution!\n */\n\nconst google = window.google;\n\nconst DrawingExampleGoogleMap = withGoogleMap(() => (\n  <GoogleMap defaultZoom={15} defaultCenter={new google.maps.LatLng(47.646935, -122.303763)}>\n    <DrawingManager\n      defaultDrawingMode={google.maps.drawing.OverlayType.CIRCLE}\n      defaultOptions={{\n        drawingControl: true,\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [\n            google.maps.drawing.OverlayType.CIRCLE,\n            google.maps.drawing.OverlayType.POLYGON,\n            google.maps.drawing.OverlayType.POLYLINE,\n            google.maps.drawing.OverlayType.RECTANGLE,\n          ],\n        },\n        circleOptions: {\n          fillColor: '#ff0000',\n          fillOpacity: 0.2,\n          strokeWeight: 3,\n          clickable: false,\n          editable: true,\n          zIndex: 1,\n        },\n        rectangleOptions: {\n          fillColor: '#ff0000',\n          fillOpacity: 0.2,\n          strokeWeight: 3,\n          clickable: false,\n          editable: true,\n          zIndex: 1,\n        },\n      }}\n    />\n  </GoogleMap>\n));\n\nconst DrawingViewExample = () => {\n  return (\n    <DrawingExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n    />\n  );\n};\n\nexport default DrawingViewExample;\n"},83629:function(e,n,o){"use strict";o.r(n),n.default="import React, { useEffect, useState } from 'react';\nimport { Circle, GoogleMap, InfoWindow, withGoogleMap } from 'react-google-maps';\nimport canUseDOM from 'can-use-dom';\nimport raf from 'raf';\nimport { Box } from '@material-ui/core';\n\nconst geoLocationExample =\n  canUseDOM && navigator.geolocation\n    ? navigator.geolocation\n    : {\n        getCurrentPosition(success, failure) {\n          failure(`Your browser doesn't support geolocation.`);\n        },\n      };\n\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap defaultZoom={10} center={props.center}>\n    {props.center && (\n      <InfoWindow position={props.center}>\n        <Box>{props.content}</Box>\n      </InfoWindow>\n    )}\n    {props.center && (\n      <Circle\n        center={props.center}\n        radius={props.radius}\n        options={{\n          fillColor: 'red',\n          fillOpacity: 0.2,\n          strokeColor: 'red',\n          strokeOpacity: 1,\n          strokeWeight: 1,\n        }}\n      />\n    )}\n  </GoogleMap>\n));\n\n/*\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\n *\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst GeoLocationExample = () => {\n  const [center, setCenter] = useState(null);\n  const [content, setContent] = useState(null);\n  const [radius, setRadius] = useState(6000);\n\n  let isUnmounted = false;\n\n  useEffect(() => {\n    const tick = () => {\n      if (isUnmounted) {\n        return;\n      }\n      setRadius(Math.max(radius - 20, 0));\n\n      if (radius > 200) {\n        raf(tick);\n      }\n    };\n    geoLocationExample.getCurrentPosition(\n      position => {\n        if (isUnmounted) {\n          return;\n        }\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setContent(`Location found using HTML5.`);\n        raf(tick);\n      },\n      reason => {\n        if (isUnmounted) {\n          return;\n        }\n\n        setCenter({\n          lat: 60,\n          lng: 105,\n        });\n        setContent(`Error: The Geolocation service failed (${reason}).`);\n      },\n    );\n\n    return () => {\n      isUnmounted = true;\n    };\n  }, []);\n\n  return (\n    <GeolocationExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n      center={center}\n      content={content}\n      radius={radius}\n    />\n  );\n};\n\nexport default GeoLocationExample;\n"},96861:function(e,n,o){"use strict";o.r(n),n.default="import React, { useEffect, useState } from 'react';\nimport { DirectionsRenderer, GoogleMap, withGoogleMap } from 'react-google-maps';\nimport { Box } from '@material-ui/core';\n\nconst google = window.google;\n\nconst DirectionsExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap defaultZoom={7} defaultCenter={props.center}>\n    {props.directions && <DirectionsRenderer directions={props.directions} />}\n  </GoogleMap>\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst MapDirectionsExample = () => {\n  const origin = new google.maps.LatLng(41.85073, -87.65126);\n  const destination = new google.maps.LatLng(41.85258, -87.65141);\n  const [directions, setDirections] = useState(null);\n\n  useEffect(() => {\n    const DirectionsService = new google.maps.DirectionsService();\n\n    DirectionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING,\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          setDirections(result);\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      },\n    );\n  }, [destination, origin]);\n\n  return (\n    <DirectionsExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n      center={origin}\n      directions={directions}\n    />\n  );\n};\n\nexport default MapDirectionsExample;\n"},83425:function(e,n,o){"use strict";o.r(n),n.default="import React from 'react';\nimport { GoogleMap, KmlLayer, withGoogleMap } from 'react-google-maps';\nimport { Box } from '@material-ui/core';\n\nconst KmlLayerExampleGoogleMap = withGoogleMap(() => (\n  <GoogleMap defaultZoom={8} defaultCenter={{ lat: 41.876, lng: -87.624 }}>\n    <KmlLayer url=\"http://googlemaps.github.io/js-v2-samples/ggeoxml/cta.kml\" options={{ preserveViewport: true }} />\n  </GoogleMap>\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst MapKmLayerExample = () => {\n  return (\n    <KmlLayerExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n    />\n  );\n};\n\nexport default MapKmLayerExample;\n"},24705:function(e,n,o){"use strict";o.r(n),n.default="import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { GoogleMap, OverlayView, withGoogleMap } from 'react-google-maps';\nimport { Box, Typography } from '@material-ui/core';\n\nconst STYLES = {\n  mapContainer: {\n    height: 500,\n  },\n  overlayView: {\n    background: '#fff',\n    border: '1px solid #ccc',\n    padding: 15,\n  },\n};\n\nfunction getPixelPositionOffset(width, height) {\n  return { x: -(width / 2), y: -(height / 2) };\n}\n\nconst OverlayViewExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap defaultZoom={15} defaultCenter={{ lat: 47.646935, lng: -122.303763 }}>\n    <OverlayView\n      position={{ lat: 47.646935, lng: -122.303763 }}\n      /*\n       * An alternative to specifying position is specifying bounds.\n       * bounds can either be an instance of google.maps.LatLngBounds\n       * or an object in the following format:\n       * bounds={{\n       *    ne: { lat: 62.400471, lng: -150.005608 },\n       *    sw: { lat: 62.281819, lng: -150.287132 }\n       * }}\n       */\n      /*\n       * 1. Specify the pane the OverlayView will be rendered to. For\n       *    mouse interactivity, use `OverlayView.OVERLAY_MOUSE_TARGET`.\n       *    Defaults to `OverlayView.OVERLAY_LAYER`.\n       */\n      mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\n      /*\n       * 2. Tweak the OverlayView's pixel position. In this case, we're\n       *    centering the content.\n       */\n      getPixelPositionOffset={getPixelPositionOffset}\n      /*\n       * 3. Create OverlayView content using standard React components.\n       */\n    >\n      <Box style={STYLES.overlayView}>\n        <Typography component=\"h1\" variant=\"h1\">\n          OverlayView\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={props.onClick}>\n          I have been clicked {props.count} time{props.count === 1 ? `` : `s`}\n        </Button>\n      </Box>\n    </OverlayView>\n  </GoogleMap>\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst MapOverlayExample = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <OverlayViewExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n      count={count}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default MapOverlayExample;\n"},33149:function(e,n,o){"use strict";o.r(n),n.default='import React, { useState } from \'react\';\nimport { GoogleMap, InfoWindow, Marker, withGoogleMap } from \'react-google-maps\';\nimport { Box, Typography } from \'@material-ui/core\';\n\nconst google = window.google;\n\nconst PopUpInfoWindowExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap defaultZoom={15} center={props.center}>\n    {props.markers.map((marker, index) => (\n      <Marker\n        defaultIcon={require(\'../../../../assets/images/marker.png\'}\n        key={index}\n        position={marker.position}\n        onClick={() => props.onMarkerClick(marker)}>\n        {/*\n          Show info window only if the \'showInfo\' key of the marker is true.\n          That is, when the Marker pin has been clicked and \'onCloseClick\' has been\n          Successfully fired.\n        */}\n        {marker.showInfo && (\n          <InfoWindow onCloseClick={() => props.onMarkerClose(marker)}>\n            <Box>{marker.infoContent}</Box>\n          </InfoWindow>\n        )}\n      </Marker>\n    ))}\n  </GoogleMap>\n));\n\n/*\n *\n *  Add <script src="https://maps.googleapis.com/maps/api/js"><\/script>\n *  to your HTML to provide google.maps reference\n *\n *  @author: @chiwoojo\n */\nconst MapPopupInfoExample = () => {\n  const center = {\n    lat: 47.646935,\n    lng: -122.303763,\n  };\n\n  const [markers, setMarkers] = useState([\n    {\n      position: new google.maps.LatLng(47.646145, -122.303763),\n      showInfo: false,\n      infoContent: (\n        <Box display="flex">\n          <Box>\n            <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">\n              <path\n                d="M3.5 0c-1.7 0-3 1.6-3 3.5 0 1.7 1 3 2.3 3.4l-.5 8c0\n              .6.4 1 1 1h.5c.5 0 1-.4 1-1L4 7C5.5 6.4 6.5 5 6.5\n              3.4c0-2-1.3-3.5-3-3.5zm10 0l-.8 5h-.6l-.3-5h-.4L11\n              5H10l-.8-5H9v6.5c0 .3.2.5.5.5h1.3l-.5 8c0 .6.4 1 1 1h.4c.6 0\n              1-.4 1-1l-.5-8h1.3c.3 0 .5-.2.5-.5V0h-.4z"\n              />\n            </svg>\n          </Box>\n          <Box ml={1}>\n            <Typography>UW Medical Center</Typography>\n            <Typography>1959 NE Pacific St</Typography>\n            <Typography>Seattle, WA 98195</Typography>\n          </Box>\n        </Box>\n      ),\n    },\n    {\n      position: new google.maps.LatLng(47.647935, -122.303763),\n      showInfo: false,\n      infoContent: (\n        <Box display="flex">\n          <Box>\n            <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">\n              <path\n                d="M6 14.5c0 .828-.672 1.5-1.5 1.5S3 15.328 3 14.5 3.672\n              13 4.5 13s1.5.672 1.5 1.5zM16 14.5c0 .828-.672 1.5-1.5\n              1.5s-1.5-.672-1.5-1.5.672-1.5 1.5-1.5 1.5.672 1.5 1.5zM16\n              8V2H4c0-.552-.448-1-1-1H0v1h2l.75 6.438C2.294 8.805 2 9.368\n              2 10c0 1.105.895 2 2 2h12v-1H4c-.552 0-1-.448-1-1v-.01L16 8z"\n              />\n            </svg>\n          </Box>\n          <Box ml={1}>\n            <Typography>University of Washington Intramural Activities (IMA) Building</Typography>\n            <Typography>3924 Montlake Blvd NE</Typography>\n            <Typography>Seattle, WA 98195</Typography>\n          </Box>\n        </Box>\n      ),\n    },\n  ]);\n\n  // Toggle to \'true\' to show InfoWindow and re-renders simple\n  const handleMarkerClick = targetMarker => {\n    setMarkers(() => {\n      markers.map(marker => {\n        if (marker === targetMarker) {\n          return {\n            ...marker,\n            showInfo: true,\n          };\n        }\n        return marker;\n      });\n    });\n  };\n\n  const handleMarkerClose = targetMarker => {\n    setMarkers(() => {\n      markers.map(marker => {\n        if (marker === targetMarker) {\n          return {\n            ...marker,\n            showInfo: false,\n          };\n        }\n        return marker;\n      });\n    });\n  };\n\n  return (\n    <PopUpInfoWindowExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n      center={center}\n      markers={markers}\n      onMarkerClick={handleMarkerClick}\n      onMarkerClose={handleMarkerClose}\n    />\n  );\n};\n\nexport default MapPopupInfoExample;\n'},43138:function(e,n,o){"use strict";o.r(n),n.default="import React, { useEffect, useState } from 'react';\n\nimport fetch from 'isomorphic-fetch';\nimport { GoogleMap, Marker, withGoogleMap } from 'react-google-maps';\nimport MarkerClusterer from 'react-google-maps/lib/components/addons/MarkerClusterer';\nimport { Box } from '@material-ui/core';\n\nconst MarkerClustererExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap defaultZoom={3} defaultCenter={{ lat: 25.0391667, lng: 121.525 }}>\n    <MarkerClusterer averageCenter enableRetinaIcons gridSize={60}>\n      {props.markers.map(marker => (\n        <Marker position={{ lat: marker.latitude, lng: marker.longitude }} key={marker.photo_id} />\n      ))}\n    </MarkerClusterer>\n  </GoogleMap>\n));\n\nconst MarkerClustererExample = () => {\n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    fetch(\n      `https://gist.githubusercontent.com/farrrr/dfda7dd7fccfec5474d3/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`,\n    )\n      .then(res => res.json())\n      .then(data => {\n        setMarkers(data.photos);\n      });\n  }, []);\n\n  return (\n    <MarkerClustererExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n      markers={markers}\n    />\n  );\n};\n\nexport default MarkerClustererExample;\n"},35864:function(e,n,o){"use strict";o.r(n),n.default="import React from 'react';\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\nimport { Box } from '@material-ui/core';\n\n/*\n * Sample From: https://developers.google.com/maps/documentation/javascript/examples/map-simple\n */\n\nconst SimpleMapExampleGoogleMap = withGoogleMap(() => (\n  <GoogleMap defaultZoom={15} defaultCenter={{ lat: 47.646935, lng: -122.303763 }} />\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst SimpleMapExample = () => {\n  return (\n    <SimpleMapExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n    />\n  );\n};\n\nexport default SimpleMapExample;\n"},97e3:function(e,n,o){"use strict";o.r(n),n.default="import React from 'react';\nimport { GoogleMap, OverlayView, StreetViewPanorama, withGoogleMap } from 'react-google-maps';\nimport { Box } from '@material-ui/core';\n\nconst coordinates = { lat: 49.2853171, lng: -123.1119202 };\n\nconst STYLES = {\n  overlayView: {\n    background: `red`,\n    color: `white`,\n    padding: 5,\n    borderRadius: `50%`,\n  },\n};\n\nfunction getPixelPositionOffset(width, height) {\n  return { x: -(width / 2), y: -(height / 2) };\n}\n\nconst StreetViewPanoramaExampleGoogleMap = withGoogleMap(() => (\n  <GoogleMap defaultZoom={8} defaultCenter={coordinates}>\n    <StreetViewPanorama defaultPosition={coordinates} visible>\n      <OverlayView\n        position={{ lat: 49.28590291211115, lng: -123.11248166065218 }}\n        mapPaneName={OverlayView.OVERLAY_LAYER}\n        getPixelPositionOffset={getPixelPositionOffset}>\n        <div style={STYLES.overlayView}>OverlayView</div>\n      </OverlayView>\n    </StreetViewPanorama>\n  </GoogleMap>\n));\n\n/**\n * You can pass in an `containerElement` to render `StreetViewPanorama` in its own containers\n * At this point the `GoogleMap` wrapper and `withGoogleMap` HOC become optional,\n * so you can either render a map and StreetView at the same time,\n * or just the StreetView on its own\n *    <StreetViewPanorama\n *      containerElement={<div style={{ width: `100%`, height: `100%` }} />}\n *      defaultPosition={coordinates}\n *      visible\n *    />\n */\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst StreetViewPanoramaExample = () => {\n  return (\n    <StreetViewPanoramaExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n    />\n  );\n};\n\nexport default StreetViewPanoramaExample;\n"},17072:function(e,n,o){"use strict";o.r(n),n.default="import React from 'react';\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\n\nimport InfoBox from 'react-google-maps/lib/components/addons/InfoBox';\n\nimport fancyMapStyles from '../data/fancyMapStyles.json';\nimport { Box } from '@material-ui/core';\n\nconst google = window.google;\n\nconst StyledMapExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap defaultZoom={11} defaultCenter={props.center} defaultOptions={{ styles: fancyMapStyles }}>\n    <InfoBox defaultPosition={props.center} options={{ closeBoxURL: ``, enableEventPropagation: true }}>\n      <Box\n        style={{ backgroundColor: `yellow`, opacity: 0.75, padding: `20px` }}\n        onClick={props.onClickFromChildrenOfInfoBox}>\n        <Box fontSize={16} color=\"#08233B\">\n          Taipei\n        </Box>\n      </Box>\n    </InfoBox>\n  </GoogleMap>\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst StyledMapExample = () => {\n  const handleClickFromChildrenOfInfoBox = e => {\n    console.log(e);\n  };\n\n  return (\n    <StyledMapExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n      center={new google.maps.LatLng(44.8799929, 21.3190073)}\n      onClickFromChildrenOfInfoBox={handleClickFromChildrenOfInfoBox}\n    />\n  );\n};\n\nexport default StyledMapExample;\n"},14754:function(e,n,o){"use strict";o.r(n),n.default="import React from 'react';\nimport { GoogleMap, TrafficLayer, withGoogleMap } from 'react-google-maps';\nimport { Box } from '@material-ui/core';\n\nconst TrafficLayerExampleGoogleMap = withGoogleMap(() => (\n  <GoogleMap defaultZoom={15} defaultCenter={{ lat: 47.646935, lng: -122.303763 }}>\n    <TrafficLayer autoUpdate />\n  </GoogleMap>\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"><\/script> to your HTML to provide google.maps reference\n */\nconst TrafficLayerExample = () => {\n  return (\n    <TrafficLayerExampleGoogleMap\n      loadingElement={<Box height={1} />}\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\n      mapElement={<Box height={1} />}\n    />\n  );\n};\n\nexport default TrafficLayerExample;\n"}}]);